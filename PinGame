<!doctype html>
<html lang="pl">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width,initial-scale=1" />
  <title>Zgadnij PIN</title>
  <style>
    :root{
      --bg:#0f1724; --card:#0b1220; --muted:#9aa4b2;
      --green:#16a34a; --yellow:#f59e0b; --red:#ef4444; --glass: rgba(255,255,255,0.03);
      font-family: Inter, ui-sans-serif, system-ui, -apple-system, "Segoe UI", Roboto, "Helvetica Neue", Arial;
    }
    *{box-sizing:border-box}
    body{margin:0;min-height:100vh;background:linear-gradient(180deg,#071026 0%, #081224 100%);color:#e6eef6;display:flex;align-items:center;justify-content:center;padding:24px}
    .container{width:100%;max-width:820px}
    header{display:flex;align-items:center;justify-content:space-between;margin-bottom:18px}
    h1{font-size:20px;margin:0}
    .controls{display:flex;gap:8px;align-items:center}
    button{background:var(--glass);border:1px solid rgba(255,255,255,0.04);color:inherit;padding:8px 12px;border-radius:8px;cursor:pointer}
    button.secondary{background:transparent;border:1px dashed rgba(255,255,255,0.04)}
    .card{background:linear-gradient(180deg, rgba(255,255,255,0.02), rgba(255,255,255,0.01));padding:18px;border-radius:12px;border:1px solid rgba(255,255,255,0.03)}
    .game-area{display:grid;grid-template-columns:1fr 320px;gap:16px}
    .left{min-height:300px}
    .instructions{color:var(--muted);font-size:14px;margin-bottom:12px}
    .entry{display:flex;gap:8px;align-items:center}
    input[type="text"]{font-size:20px;padding:10px 12px;border-radius:8px;border:1px solid rgba(255,255,255,0.06);width:160px;background:transparent;color:inherit}
    .attempts{margin-top:12px;display:flex;flex-direction:column;gap:8px}
    .row{display:flex;gap:8px}
    .cell{width:48px;height:48px;display:flex;align-items:center;justify-content:center;border-radius:8px;background:rgba(255,255,255,0.02);border:1px solid rgba(255,255,255,0.03);font-weight:700}
    .cell.green{background:linear-gradient(180deg, rgba(22,163,74,0.16), rgba(22,163,74,0.08));border-color:rgba(22,163,74,0.24);color:var(--green)}
    .cell.yellow{background:linear-gradient(180deg, rgba(245,158,11,0.12), rgba(245,158,11,0.06));border-color:rgba(245,158,11,0.24);color:var(--yellow)}
    .cell.red{background:linear-gradient(180deg, rgba(239,68,68,0.08), rgba(239,68,68,0.04));border-color:rgba(239,68,68,0.12);color:var(--red)}
    .meta{color:var(--muted);font-size:13px;margin-top:8px}

    /* ranking */
    .ranking{display:flex;flex-direction:column;gap:10px}
    .ranking h3{margin:0 0 6px 0}
    .leader{display:flex;justify-content:space-between;padding:8px;border-radius:8px;background:rgba(255,255,255,0.02)}
    .small{font-size:13px;color:var(--muted)}
    footer{margin-top:12px;color:var(--muted);font-size:13px;text-align:center}

    @media (max-width:760px){.game-area{grid-template-columns:1fr;}.controls{flex-wrap:wrap}}
  </style>
</head>
<body>
  <div class="container">
    <header>
      <h1>Zgadnij PIN — gra</h1>
      <div class="controls">
        <button id="newGameBtn">Nowa gra</button>
        <button id="showRulesBtn" class="secondary">Zasady</button>
      </div>
    </header>

    <div class="game-area">
      <div class="left card">
        <div class="instructions">
          Wylosowany został 4-cyfrowy PIN. Wprowadź swoją propozycję i zatwierdź.
          Kolory pokażą: <span style="color:var(--green)">zielony</span> — cyfra poprawna i na właściwym miejscu, <span style="color:var(--yellow)">żółty</span> — cyfra jest, ale na innym miejscu, <span style="color:var(--red)">czerwony</span> — cyfra nie występuje w PINie.
        </div>

        <div class="entry">
          <input id="guessInput" type="text" inputmode="numeric" maxlength="4" placeholder="Wpisz 4 cyfry" />
          <button id="submitBtn">Zatwierdź</button>
        </div>
        <div class="meta" id="status">Ruchów: 0</div>

        <div class="attempts" id="attempts"></div>

      </div>

      <aside class="card">
        <div class="ranking">
          <h3>Ranking — najlepsze wyniki</h3>
          <div id="leaderboard"></div>
          <div style="display:flex;gap:8px;margin-top:10px">
            <button id="clearBoard">Wyczyść ranking</button>
            <button id="exportBoard" class="secondary">Eksportuj JSON</button>
          </div>
          <div class="small" style="margin-top:8px">Po wygranej możesz zapisać swoje imię i wynik (liczba ruchów).</div>
        </div>
      </aside>
    </div>

    <footer class="small">Autor: generator — gotowe do uruchomienia w przeglądarce. PIN odświeża się przy starcie lub po kliknięciu "Nowa gra".</footer>
  </div>

  <script>
    // Ustawienia gry
    const PIN_LENGTH = 4;
    let pin = '';
    let attempts = [];
    let gameOver = false;

    const guessInput = document.getElementById('guessInput');
    const submitBtn = document.getElementById('submitBtn');
    const attemptsEl = document.getElementById('attempts');
    const statusEl = document.getElementById('status');
    const newGameBtn = document.getElementById('newGameBtn');
    const leaderboardEl = document.getElementById('leaderboard');
    const clearBoardBtn = document.getElementById('clearBoard');
    const exportBoardBtn = document.getElementById('exportBoard');
    const showRulesBtn = document.getElementById('showRulesBtn');

    function randomPin(){
      let s = '';
      for(let i=0;i<PIN_LENGTH;i++) s += Math.floor(Math.random()*10).toString();
      return s;
    }

    function startNewGame(){
      pin = randomPin();
      attempts = [];
      gameOver = false;
      attemptsEl.innerHTML = '';
      statusEl.textContent = 'Ruchów: 0';
      guessInput.value = '';
      guessInput.disabled = false;
      submitBtn.disabled = false;
      guessInput.focus();
      console.log('PIN (debug):', pin); // usuń w wersji produkcyjnej jeśli chcesz ukryć PIN
    }

    // Ocena zgadnięcia — podobnie jak Wordle
    function evaluateGuess(guess, target){
      // oba jako string długości PIN_LENGTH
      const result = Array(PIN_LENGTH).fill('red');
      const targetArr = target.split('');
      const guessArr = guess.split('');

      // 1) zaznacz zielone (dokładne dopasowania)
      for(let i=0;i<PIN_LENGTH;i++){
        if(guessArr[i] === targetArr[i]){
          result[i] = 'green';
          // oznacz jako wykorzystane
          targetArr[i] = null;
          guessArr[i] = null;
        }
      }
      // 2) sprawdź pozostałe — jeśli cyfra występuje gdzie indziej -> yellow (ale tylko tyle razy ile występuje)
      for(let i=0;i<PIN_LENGTH;i++){
        if(guessArr[i] == null) continue;
        const idx = targetArr.indexOf(guessArr[i]);
        if(idx !== -1){
          result[i] = 'yellow';
          targetArr[idx] = null; // wykorzystaj tę cyfrę
          guessArr[i] = null;
        }
      }
      return result;
    }

    function renderAttempts(){
      attemptsEl.innerHTML = '';
      attempts.forEach((a, idx) => {
        const row = document.createElement('div');
        row.className = 'row';
        // digital cells
        for(let i=0;i<PIN_LENGTH;i++){
          const c = document.createElement('div');
          c.className = 'cell ' + a.status[i];
          c.textContent = a.guess[i];
          row.appendChild(c);
        }
        // add text about move
        const meta = document.createElement('div');
        meta.style.marginLeft = '8px';
        meta.style.display = 'flex';
        meta.style.flexDirection = 'column';
        meta.style.justifyContent = 'center';
        const span = document.createElement('div');
        span.textContent = `Ruch ${idx+1}`;
        span.style.fontSize = '13px';
        span.style.color = 'var(--muted)';
        meta.appendChild(span);
        row.appendChild(meta);

        attemptsEl.appendChild(row);
      });
      statusEl.textContent = `Ruchów: ${attempts.length}`;
    }

    function onSubmit(){
      if(gameOver) return;
      const guess = guessInput.value.trim();
      if(!/^[0-9]{4}$/.test(guess)){
        alert('Wprowadź dokładnie ' + PIN_LENGTH + ' cyfr!');
        return;
      }
      const status = evaluateGuess(guess, pin);
      attempts.push({guess, status});
      renderAttempts();
      guessInput.value = '';
      guessInput.focus();

      // sprawdź czy wszystkie zielone
      const won = status.every(s => s === 'green');
      if(won){
        gameOver = true;
        guessInput.disabled = true;
        submitBtn.disabled = true;
        setTimeout(() => {
          const moves = attempts.length;
          const name = prompt(`Gratulacje! Odgadłeś PIN w ${moves} ruchach. Wpisz swoje imię do rankingu (lub Anon):`, 'Anon') || 'Anon';
          saveToLeaderboard(name, moves);
          renderLeaderboard();
        }, 150);
      }
    }

    // Ranking w localStorage
    const STORAGE_KEY = 'pinGuessLeaderboard';
    function loadLeaderboard(){
      try{
        const raw = localStorage.getItem(STORAGE_KEY);
        if(!raw) return [];
        return JSON.parse(raw);
      }catch(e){
        return [];
      }
    }
    function saveLeaderboard(arr){
      localStorage.setItem(STORAGE_KEY, JSON.stringify(arr));
    }
    function saveToLeaderboard(name, moves){
      const board = loadLeaderboard();
      board.push({name: name, moves: moves, date: new Date().toISOString()});
      // sort rosnąco po moves (mniej = lepiej), potem po dacie
      board.sort((a,b) => a.moves - b.moves || new Date(a.date) - new Date(b.date));
      // zachowaj tylko top 50
      saveLeaderboard(board.slice(0,50));
    }
    function renderLeaderboard(){
      const board = loadLeaderboard();
      if(board.length === 0){
        leaderboardEl.innerHTML = '<div class="small">Brak wyników. Zagraj i zapisz wynik!</div>';
        return;
      }
      leaderboardEl.innerHTML = '';
      board.slice(0,10).forEach((r, idx) => {
        const row = document.createElement('div');
        row.className = 'leader';
        const left = document.createElement('div');
        left.innerHTML = `<strong>#${idx+1} ${escapeHtml(r.name)}</strong><div class="small">${new Date(r.date).toLocaleString()}</div>`;
        const right = document.createElement('div');
        right.innerHTML = `<div style="font-weight:700">${r.moves} ruch(y)</div>`;
        row.appendChild(left);
        row.appendChild(right);
        leaderboardEl.appendChild(row);
      });
    }

    function escapeHtml(s){
      return s.replace(/[&<>\"']/g, function(c){return {'&':'&amp;','<':'&lt;','>':'&gt;','"':'&quot;',"'":'&#39;'}[c];});
    }

    clearBoardBtn.addEventListener('click', ()=>{
      if(confirm('Na pewno wyczyścić ranking?')){
        localStorage.removeItem(STORAGE_KEY);
        renderLeaderboard();
      }
    });

    exportBoardBtn.addEventListener('click', ()=>{
      const board = loadLeaderboard();
      const blob = new Blob([JSON.stringify(board, null, 2)], {type:'application/json'});
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = 'pin_ranking.json';
      a.click();
      URL.revokeObjectURL(url);
    });

    submitBtn.addEventListener('click', onSubmit);
    guessInput.addEventListener('keydown', (e)=>{
      if(e.key === 'Enter') onSubmit();
    });

    newGameBtn.addEventListener('click', startNewGame);
    showRulesBtn.addEventListener('click', ()=>{
      alert('Zasady:\n- PIN ma ' + PIN_LENGTH + ' cyfry.\n- Zielony = cyfra poprawna i na właściwym miejscu.\n- Żółty = cyfra występuje w PINie, ale na innym miejscu.\n- Czerwony = cyfra nie występuje.\n- Po odgadnięciu możesz zapisać swój wynik w rankingu.');
    });

    // init
    renderLeaderboard();
    startNewGame();
  </script>
</body>
</html>
